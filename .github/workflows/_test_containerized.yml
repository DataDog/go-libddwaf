name: Test (Containerized)
on:
  workflow_call: # This is called by test.yml

jobs:
  go-versions:
    runs-on: ubuntu-latest
    outputs:
      stable: ${{ steps.stable.outputs.go-version }}
      oldstable: ${{ steps.oldstable.outputs.go-version }}
    steps:
      - uses: actions/setup-go@v5
        id: oldstable
        with:
          go-version: 'oldstable'
          cache: false
      - uses: actions/setup-go@v5
        id: stable
        with:
          go-version: 'stable'
          cache: false

  test:
    needs: [go-versions]
    strategy:
      fail-fast: false
      matrix:
        arch: [ amd64, arm64 ]
        image:
          # Standard golang images
          - golang:{0}-alpine
          - golang:{0}-bookworm
          - golang:{0}-bullseye
        go-version:
          - ${{ needs.go-versions.outputs.stable }}
          - ${{ needs.go-versions.outputs.oldstable }}
          - tip
        include:
          # Test with DD_APPSEC_WAF_LOG_LEVEL (only latest go, without any particular tag)
          - go-version: ${{ needs.go-versions.outputs.stable }}
            waf-log-level: TRACE
    name: ${{ matrix.arch }} ${{ format(matrix.image, matrix.go-version) }} go${{ matrix.go-version }}${{ matrix.waf-log-level && format(' (DD_APPSEC_WAF_LOG_LEVEL={0})', matrix.waf-log-level) || '' }}
    # We use ARM runners when needed to avoid the performance hit of QEMU
    runs-on: ${{ matrix.arch == 'amd64' && 'ubuntu-latest' || 'arm-4core-linux' }}
    steps:
      # Docker is not present on early-access ARM runners
      - name: Prepare ARM Runner
        if: matrix.arch == 'arm64'
        run: |-
          for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove -y $pkg || echo "Not present: $pkg"; done

          sudo apt update
          sudo apt install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL "https://download.docker.com/linux/ubuntu/gpg" -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list
          sudo apt update
          sudo apt install -y docker-ce docker-ce-cli containerd.io

      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: go-pkg-mod-${{ hashFiles('**/go.mod') }}
          restore-keys: go-pkg-mod-
      - name: Create container
        id: container
        run: |-
          sudo docker run --name gha-${{ github.run_id }} --rm -di              \
            -v "${HOME}/go/pkg/mod:/go/pkg/mod"                                 \
            -v "$PWD:$PWD"                                                      \
            -w "$PWD"                                                           \
            -eDD_APPSEC_WAF_LOG_LEVEL="${{ matrix.waf-log-level }}"             \
            -eGOMODCACHE="/go/pkg/mod"                                          \
            "${{ format(matrix.image, matrix.go-version) }}"
      - name: Install AmazonLinux 2 requirements
        if: matrix.image == 'amazonlinux:2' || matrix.image == 'amazonlinux:2023'
        run: |-
          sudo docker exec -i gha-${{ github.run_id }}                          \
            yum install -y golang
      - name: Run the ci.sh script
        run: |-
          sudo docker exec -i gha-${{ github.run_id }} $PWD/.github/workflows/ci.sh
      - name: Stop container
        if: always() && steps.container.outcome == 'success'
        run: |-
          sudo docker stop gha-${{ github.run_id }}
