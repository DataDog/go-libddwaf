name: Test (Containerized)
on:
  workflow_call: # This is called by test.yml

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        image:
          # Standard golang images
          - golang:{0}-alpine
          - golang:{0}-bookworm
          - golang:{0}-bullseye
          - golang:{0}-buster
          # RPM-based image
          - amazonlinux:2 # pretty popular on AWS workloads
        arch: [ amd64, arm64 ]
        go-version: [ "1.22rc2", "1.21", "1.20" ]
        cgo-enabled: [ "0", "1" ] # test it compiles with and without cgo
        go-tags:
          - ''                      # Default behavior
          - 'datadog.no_waf'        # Explicitly disabled WAF
          - 'appsec'                # Legacy build tag to enable appsec when cgo is disabled
          - 'appsec,datadog.no_waf' # An awkward combination that must nevertheless compile
          - 'go1.23'                # Too recent go version (purego compatibility uncertain)
          - 'datadog.no_waf,go1.23' # Explicitly disabled & too recent go version (purego compatibility uncertain)
          - 'appsec,go1.23'         # Explicitly enabled w/o cgo & too recent go version (purego compatibility uncertain)
        include:
          # gocheck2 is configured differently in go1.21 than in previous versions
          - go-version: '1.21'
            go-experiment: cgocheck2
          - go-version: '1.22rc2'
            go-experiment: cgocheck2
          - go-version: '1.20'
            go-debug: cgocheck=2
          # Test with DD_APPSEC_WAF_LOG_LEVEL (only latest go, without any particular tag)
          - go-version: '1.22rc2'
            go-tags: ''
            waf-log-level: TRACE
            waf-timeout: 30s # Increase the timeout (especially in QEMU emulated modes)

        exclude:
          # Test arm64 on a subset of the matrix for now to make it quicker to run due to qemu
          - arch: arm64
            image: golang:{0}-buster
          - arch: arm64
            image: golang:{0}-bullseye
          # Prune redundant checks (the go-next test needs only run once per platform)
          - go-version: '1.21'
            go-tags: 'go1.23'
          - go-version: '1.21'
            go-tags: 'datadog.no_waf,go1.23'
          - go-version: '1.20'
            go-tags: 'go1.23'
          - go-version: '1.20'
            go-tags: 'datadog.no_waf,go1.23'
          # Prune redundant checks (the appsec build tag is only relevant with cgo-enabled=0)
          - cgo-enabled: 1
            go-tags: "appsec"
          - cgo-enabled: 1
            go-tags: "appsec,go1.23"
          # Prune inexistant build images (debian buster is on LTS but won't get new go version images)
          - go-version: '1.21'
            image: golang:{0}-buster
           # Prune inexistant build images (debian buster is on LTS but won't get new go version images)
          - go-version: '1.22rc2'
            image: golang:{0}-buster
          # The amazonlinux:2 variant is only relevant for the default go version yum ships (currently 1.20)
          - go-version: '1.21'
            image: amazonlinux:2
          - go-version: '1.22rc2'
            image: amazonlinux:2
    name: ${{ toJSON(matrix) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: go-pkg-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: go-pkg-mod-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.arch }}
      - name: Create container
        id: container
        run: |-
          docker run --name gha-${{ github.run_id }} --rm -di                   \
            --platform="linux/${{ matrix.arch }}"                               \
            -v "${HOME}/go/pkg/mod:/go/pkg/mod"                                 \
            -v "$PWD:$PWD"                                                      \
            -w "$PWD"                                                           \
            -eCGO_ENABLED="${{ matrix.cgo-enabled }}"                           \
            -eDD_APPSEC_WAF_LOG_FILTER="@ waf[.]cpp:"                           \
            -eDD_APPSEC_WAF_LOG_LEVEL="${{ matrix.waf-log-level }}"             \
            -eDD_APPSEC_WAF_TIMEOUT="${{ matrix.waf-timeout || '5s' }}"         \
            -eGODEBUG="${{ matrix.go-debug }}"                                  \
            -eGOEXPERIMENT="${{ matrix.go-experiment }}"                        \
            -eGOMODCACHE="/go/pkg/mod"                                          \
            "${{ format(matrix.image, matrix.go-version) }}"
      - name: Install alpine requirements
        if: endsWith(matrix.image, '-alpine') && matrix.cgo-enabled == '1'
        run: |-
          docker exec -i gha-${{ github.run_id }}                               \
            apk add gcc musl-dev libc6-compat
      - name: Install AmazonLinux 2 requirements
        if: matrix.image == 'amazonlinux:2'
        run: |-
          docker exec -i gha-${{ github.run_id }}                               \
            yum install -y golang
      - name: Install gotestsum
        run: |-
          docker exec -i gha-${{ github.run_id }}                               \
            go install gotest.tools/gotestsum@latest
      - name: go test
        run: |-
          docker exec -i gha-${{ github.run_id }}                               \
            go run gotest.tools/gotestsum@latest --                             \
              -v -count=10 -shuffle=on -tags='${{ matrix.go-tags }}'             \
              ./...
      - name: Stop container
        if: always() && steps.container.outcome == 'success'
        run: |-
          docker stop gha-${{ github.run_id }}
